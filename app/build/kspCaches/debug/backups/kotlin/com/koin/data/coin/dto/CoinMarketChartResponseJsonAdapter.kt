// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.koin.`data`.coin.dto

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Double
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.text.buildString

public class CoinMarketChartResponseJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<CoinMarketChartResponse>() {
  private val options: JsonReader.Options = JsonReader.Options.of("prices", "market_caps",
      "total_volumes")

  private val listOfListOfDoubleAdapter: JsonAdapter<List<List<Double>>> =
      moshi.adapter(Types.newParameterizedType(List::class.java,
      Types.newParameterizedType(List::class.java, Double::class.javaObjectType)), emptySet(),
      "prices")

  override fun toString(): String = buildString(45) {
      append("GeneratedJsonAdapter(").append("CoinMarketChartResponse").append(')') }

  override fun fromJson(reader: JsonReader): CoinMarketChartResponse {
    var prices: List<List<Double>>? = null
    var marketCaps: List<List<Double>>? = null
    var totalVolumes: List<List<Double>>? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> prices = listOfListOfDoubleAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("prices", "prices", reader)
        1 -> marketCaps = listOfListOfDoubleAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("marketCaps", "market_caps", reader)
        2 -> totalVolumes = listOfListOfDoubleAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("totalVolumes", "total_volumes", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return CoinMarketChartResponse(
        prices = prices ?: throw Util.missingProperty("prices", "prices", reader),
        marketCaps = marketCaps ?: throw Util.missingProperty("marketCaps", "market_caps", reader),
        totalVolumes = totalVolumes ?: throw Util.missingProperty("totalVolumes", "total_volumes",
            reader)
    )
  }

  override fun toJson(writer: JsonWriter, value_: CoinMarketChartResponse?) {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("prices")
    listOfListOfDoubleAdapter.toJson(writer, value_.prices)
    writer.name("market_caps")
    listOfListOfDoubleAdapter.toJson(writer, value_.marketCaps)
    writer.name("total_volumes")
    listOfListOfDoubleAdapter.toJson(writer, value_.totalVolumes)
    writer.endObject()
  }
}
